problems:
  1:
    title: "Two Sum"
    description: |
      Given an array of integers nums and an integer target, return indices of the two numbers 
      such that they add up to target. You may assume that each input would have exactly one solution, 
      and you may not use the same element twice.
    signature: "def two_sum(nums: List[int], target: int) -> List[int]:"
    examples:
      - input: "nums = [2,7,11,15], target = 9"
        output: "[0,1]"
        explanation: "Because nums[0] + nums[1] == 9, we return [0, 1]"
      - input: "nums = [3,2,4], target = 6"
        output: "[1,2]"
        explanation: "Because nums[1] + nums[2] == 6, we return [1, 2]"
    test_cases:
      - input: "([2,7,11,15], 9)"
        expected: "[0,1]"
      - input: "([3,2,4], 6)"
        expected: "[1,2]"
      - input: "([3,3], 6)"
        expected: "[0,1]"
      - input: "([1,2,3,4,5], 9)"
        expected: "[3,4]"
      - input: "([0,4,3,0], 0)"
        expected: "[0,3]"
      - input: "([-1,-2,-3,-4,-5], -8)"
        expected: "[2,4]"
    solution: |
      def two_sum(nums: List[int], target: int) -> List[int]:
          num_map = {}
          for i, num in enumerate(nums):
              complement = target - num
              if complement in num_map:
                  return [num_map[complement], i]
              num_map[num] = i
          return []

  2:
    title: "Palindrome Check"
    description: |
      Given a string s, return true if it is a palindrome, or false otherwise.
      A string is a palindrome when it reads the same forward and backward.
    signature: "def is_palindrome(s: str) -> bool:"
    examples:
      - input: 's = "racecar"'
        output: "true"
        explanation: "racecar reads the same forward and backward"
      - input: 's = "hello"'
        output: "false"
        explanation: "hello does not read the same forward and backward"
    test_cases:
      - input: '"racecar"'
        expected: "True"
      - input: '"hello"'
        expected: "False"
      - input: '""'
        expected: "True"
      - input: '"a"'
        expected: "True"
    solution: |
      def is_palindrome(s: str) -> bool:
          return s == s[::-1]

  3:
    title: "Fibonacci Number"
    description: |
      The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, 
      such that each number is the sum of the two preceding ones, starting from 0 and 1.
      Given n, calculate F(n).
    signature: "def fib(n: int) -> int:"
    examples:
      - input: "n = 2"
        output: "1"
        explanation: "F(2) = F(1) + F(0) = 1 + 0 = 1"
      - input: "n = 3"
        output: "2"
        explanation: "F(3) = F(2) + F(1) = 1 + 1 = 2"
      - input: "n = 4"
        output: "3"
        explanation: "F(4) = F(3) + F(2) = 2 + 1 = 3"
    test_cases:
      - input: "0"
        expected: "0"
      - input: "1"
        expected: "1"
      - input: "2"
        expected: "1"
      - input: "3"
        expected: "2"
      - input: "4"
        expected: "3"
      - input: "5"
        expected: "5"
    solution: |
      def fib(n: int) -> int:
          if n <= 1:
              return n
          return fib(n-1) + fib(n-2)

  4:
    title: "Valid Parentheses"
    description: |
      Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', 
      determine if the input string is valid. An input string is valid if:
      1. Open brackets must be closed by the same type of brackets.
      2. Open brackets must be closed in the correct order.
    signature: "def is_valid(s: str) -> bool:"
    examples:
      - input: 's = "()"'
        output: "true"
        explanation: "The parentheses are properly matched"
      - input: 's = "()[]{}"'
        output: "true"
        explanation: "All brackets are properly matched and closed in correct order"
      - input: 's = "(]"'
        output: "false"
        explanation: "Brackets are not properly matched"
    test_cases:
      - input: '"()"'
        expected: "True"
      - input: '"()[]{}"'
        expected: "True"
      - input: '"(]"'
        expected: "False"
      - input: '"([)]"'
        expected: "False"
      - input: '"{[]}"'
        expected: "True"
    solution: |
      def is_valid(s: str) -> bool:
          stack = []
          mapping = {')': '(', '}': '{', ']': '['}
          for char in s:
              if char in mapping:
                  if not stack or stack.pop() != mapping[char]:
                      return False
              else:
                  stack.append(char)
          return not stack

  5:
    title: "Maximum Subarray"
    description: |
      Given an integer array nums, find the contiguous subarray (containing at least one number) 
      which has the largest sum and return its sum.
    signature: "def max_subarray(nums: List[int]) -> int:"
    examples:
      - input: "nums = [-2,1,-3,4,-1,2,1,-5,4]"
        output: "6"
        explanation: "[4,-1,2,1] has the largest sum = 6"
      - input: "nums = [1]"
        output: "1"
        explanation: "The only element is the maximum"
      - input: "nums = [5,4,-1,7,8]"
        output: "23"
        explanation: "The entire array has the largest sum = 23"
    test_cases:
      - input: "[-2,1,-3,4,-1,2,1,-5,4]"
        expected: "6"
      - input: "[1]"
        expected: "1"
      - input: "[5,4,-1,7,8]"
        expected: "23"
      - input: "[-1]"
        expected: "-1"
      - input: "[-2,-1]"
        expected: "-1"
    solution: |
      def max_subarray(nums: List[int]) -> int:
          max_sum = current_sum = nums[0]
          for i in range(1, len(nums)):
              current_sum = max(nums[i], current_sum + nums[i])
              max_sum = max(max_sum, current_sum)
          return max_sum

  6:
    title: "Reverse Integer"
    description: |
      Given a signed 32-bit integer x, return x with its digits reversed. 
      If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.
    signature: "def reverse(x: int) -> int:"
    examples:
      - input: "x = 123"
        output: "321"
        explanation: "The digits are reversed"
      - input: "x = -123"
        output: "-321"
        explanation: "The digits are reversed, sign is preserved"
      - input: "x = 120"
        output: "21"
        explanation: "Trailing zeros are removed"
    test_cases:
      - input: "123"
        expected: "321"
      - input: "-123"
        expected: "-321"
      - input: "120"
        expected: "21"
      - input: "0"
        expected: "0"
      - input: "1534236469"
        expected: "0"
    solution: |
      def reverse(x: int) -> int:
          sign = -1 if x < 0 else 1
          x = abs(x)
          result = 0
          while x:
              result = result * 10 + x % 10
              x //= 10
          result *= sign
          return result if -2**31 <= result <= 2**31 - 1 else 0

  7:
    title: "Contains Duplicate"
    description: |
      Given an integer array nums, return true if any value appears at least twice in the array, 
      and return false if every element is distinct.
    signature: "def contains_duplicate(nums: List[int]) -> bool:"
    examples:
      - input: "nums = [1,2,3,1]"
        output: "true"
        explanation: "The value 1 appears twice"
      - input: "nums = [1,2,3,4]"
        output: "false"
        explanation: "All elements are distinct"
      - input: "nums = [1,1,1,3,3,4,3,2,4,2]"
        output: "true"
        explanation: "Multiple values appear more than once"
    test_cases:
      - input: "[1,2,3,1]"
        expected: "True"
      - input: "[1,2,3,4]"
        expected: "False"
      - input: "[1,1,1,3,3,4,3,2,4,2]"
        expected: "True"
      - input: "[]"
        expected: "False"
      - input: "[1]"
        expected: "False"
    solution: |
      def contains_duplicate(nums: List[int]) -> bool:
          return len(nums) != len(set(nums))

  8:
    title: "Best Time to Buy and Sell Stock"
    description: |
      You are given an array prices where prices[i] is the price of a given stock on the ith day.
      You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
      Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
    signature: "def max_profit(prices: List[int]) -> int:"
    examples:
      - input: "prices = [7,1,5,3,6,4]"
        output: "5"
        explanation: "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5"
      - input: "prices = [7,6,4,3,1]"
        output: "0"
        explanation: "No profit can be achieved as prices only decrease"
    test_cases:
      - input: "[7,1,5,3,6,4]"
        expected: "5"
      - input: "[7,6,4,3,1]"
        expected: "0"
      - input: "[1,2,3,4,5]"
        expected: "4"
      - input: "[2,4,1]"
        expected: "2"
      - input: "[1]"
        expected: "0"
    solution: |
      def max_profit(prices: List[int]) -> int:
          if not prices:
              return 0
          min_price = prices[0]
          max_profit = 0
          for price in prices[1:]:
              max_profit = max(max_profit, price - min_price)
              min_price = min(min_price, price)
          return max_profit

  9:
    title: "Valid Anagram"
    description: |
      Given two strings s and t, return true if t is an anagram of s, and false otherwise.
      An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, 
      typically using all the original letters exactly once.
    signature: "def is_anagram(s: str, t: str) -> bool:"
    examples:
      - input: 's = "anagram", t = "nagaram"'
        output: "true"
        explanation: "Both strings contain the same characters with the same frequency"
      - input: 's = "rat", t = "car"'
        output: "false"
        explanation: "The strings contain different characters"
    test_cases:
      - input: '("anagram", "nagaram")'
        expected: "True"
      - input: '("rat", "car")'
        expected: "False"
      - input: '("listen", "silent")'
        expected: "True"
      - input: '("a", "ab")'
        expected: "False"
      - input: '("", "")'
        expected: "True"
    solution: |
      def is_anagram(s: str, t: str) -> bool:
          if len(s) != len(t):
              return False
          return sorted(s) == sorted(t)

  10:
    title: "Missing Number"
    description: |
      Given an array nums containing n distinct numbers in the range [0, n], 
      return the only number in the range that is missing from the array.
    signature: "def missing_number(nums: List[int]) -> int:"
    examples:
      - input: "nums = [3,0,1]"
        output: "2"
        explanation: "n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number"
      - input: "nums = [0,1]"
        output: "2"
        explanation: "n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number"
      - input: "nums = [9,6,4,2,3,5,7,0,1]"
        output: "8"
        explanation: "n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number"
    test_cases:
      - input: "[3,0,1]"
        expected: "2"
      - input: "[0,1]"
        expected: "2"
      - input: "[9,6,4,2,3,5,7,0,1]"
        expected: "8"
      - input: "[0]"
        expected: "1"
      - input: "[1]"
        expected: "0"
    solution: |
      def missing_number(nums: List[int]) -> int:
          n = len(nums)
          expected_sum = n * (n + 1) // 2
          actual_sum = sum(nums)
          return expected_sum - actual_sum

  11:
    title: "Single Number"
    description: |
      Given a non-empty array of integers nums, every element appears twice except for one. 
      Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.
    signature: "def single_number(nums: List[int]) -> int:"
    examples:
      - input: "nums = [2,2,1]"
        output: "1"
        explanation: "1 appears once while 2 appears twice"
      - input: "nums = [4,1,2,1,2]"
        output: "4"
        explanation: "4 appears once while others appear twice"
      - input: "nums = [1]"
        output: "1"
        explanation: "Only one element in the array"
    test_cases:
      - input: "[2,2,1]"
        expected: "1"
      - input: "[4,1,2,1,2]"
        expected: "4"
      - input: "[1]"
        expected: "1"
      - input: "[1,0,1]"
        expected: "0"
      - input: "[2,1,4,9,6,9,6,2,1]"
        expected: "4"
    solution: |
      def single_number(nums: List[int]) -> int:
          result = 0
          for num in nums:
              result ^= num
          return result

  12:
    title: "Climbing Stairs"
    description: |
      You are climbing a staircase. It takes n steps to reach the top.
      Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
    signature: "def climb_stairs(n: int) -> int:"
    examples:
      - input: "n = 2"
        output: "2"
        explanation: "There are two ways: 1. 1 step + 1 step 2. 2 steps"
      - input: "n = 3"
        output: "3"
        explanation: "There are three ways: 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step"
    test_cases:
      - input: "1"
        expected: "1"
      - input: "2"
        expected: "2"
      - input: "3"
        expected: "3"
      - input: "4"
        expected: "5"
      - input: "5"
        expected: "8"
    solution: |
      def climb_stairs(n: int) -> int:
          if n <= 2:
              return n
          prev1, prev2 = 1, 2
          for i in range(3, n + 1):
              current = prev1 + prev2
              prev1, prev2 = prev2, current
          return prev2

  13:
    title: "Merge Two Sorted Lists"
    description: |
      You are given the heads of two sorted linked lists list1 and list2.
      Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
      Return the head of the merged linked list.
    signature: "def merge_two_lists(list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:"
    examples:
      - input: "list1 = [1,2,4], list2 = [1,3,4]"
        output: "[1,1,2,3,4,4]"
        explanation: "Merging the two sorted lists results in a single sorted list"
      - input: "list1 = [], list2 = []"
        output: "[]"
        explanation: "Both lists are empty"
      - input: "list1 = [], list2 = [0]"
        output: "[0]"
        explanation: "One list is empty, return the other"
    test_cases:
      - input: "([1,2,4], [1,3,4])"
        expected: "[1,1,2,3,4,4]"
      - input: "([], [])"
        expected: "[]"
      - input: "([], [0])"
        expected: "[0]"
      - input: "([1], [2])"
        expected: "[1,2]"
      - input: "([1,3,5], [2,4,6])"
        expected: "[1,2,3,4,5,6]"
    solution: |
      def merge_two_lists(list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
          dummy = ListNode(0)
          current = dummy
          
          while list1 and list2:
              if list1.val <= list2.val:
                  current.next = list1
                  list1 = list1.next
              else:
                  current.next = list2
                  list2 = list2.next
              current = current.next
          
          current.next = list1 or list2
          return dummy.next

  14:
    title: "Remove Duplicates from Sorted Array"
    description: |
      Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. 
      The relative order of the elements should be kept the same. Return k after placing the final result in the first k slots of nums.
    signature: "def remove_duplicates(nums: List[int]) -> int:"
    examples:
      - input: "nums = [1,1,2]"
        output: "2"
        explanation: "Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively"
      - input: "nums = [0,0,1,1,1,2,2,3,3,4]"
        output: "5"
        explanation: "Your function should return k = 5, with the first five elements being 0, 1, 2, 3, and 4"
    test_cases:
      - input: "[1,1,2]"
        expected: "2"
      - input: "[0,0,1,1,1,2,2,3,3,4]"
        expected: "5"
      - input: "[1,2,3]"
        expected: "3"
      - input: "[1,1,1,1]"
        expected: "1"
      - input: "[1]"
        expected: "1"
    solution: |
      def remove_duplicates(nums: List[int]) -> int:
          if not nums:
              return 0
          
          write_index = 1
          for i in range(1, len(nums)):
              if nums[i] != nums[i-1]:
                  nums[write_index] = nums[i]
                  write_index += 1
          return write_index

  15:
    title: "Length of Last Word"
    description: |
      Given a string s consisting of words and spaces, return the length of the last word in the string.
      A word is a maximal substring consisting of non-space characters only.
    signature: "def length_of_last_word(s: str) -> int:"
    examples:
      - input: 's = "Hello World"'
        output: "5"
        explanation: "The last word is 'World' with length 5"
      - input: 's = "   fly me   to   the moon  "'
        output: "4"
        explanation: "The last word is 'moon' with length 4"
      - input: 's = "luffy is still joyboy"'
        output: "6"
        explanation: "The last word is 'joyboy' with length 6"
    test_cases:
      - input: '"Hello World"'
        expected: "5"
      - input: '"   fly me   to   the moon  "'
        expected: "4"
      - input: '"luffy is still joyboy"'
        expected: "6"
      - input: '"a"'
        expected: "1"
      - input: '"   a   "'
        expected: "1"
    solution: |
      def length_of_last_word(s: str) -> int:
          return len(s.strip().split()[-1])

  16:
    title: "Plus One"
    description: |
      You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
      The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
      Increment the large integer by one and return the resulting array of digits.
    signature: "def plus_one(digits: List[int]) -> List[int]:"
    examples:
      - input: "digits = [1,2,3]"
        output: "[1,2,4]"
        explanation: "The array represents the integer 123. Incrementing by one gives 124"
      - input: "digits = [4,3,2,1]"
        output: "[4,3,2,2]"
        explanation: "The array represents the integer 4321. Incrementing by one gives 4322"
      - input: "digits = [9]"
        output: "[1,0]"
        explanation: "The array represents the integer 9. Incrementing by one gives 10"
    test_cases:
      - input: "[1,2,3]"
        expected: "[1,2,4]"
      - input: "[4,3,2,1]"
        expected: "[4,3,2,2]"
      - input: "[9]"
        expected: "[1,0]"
      - input: "[9,9,9]"
        expected: "[1,0,0,0]"
      - input: "[0]"
        expected: "[1]"
    solution: |
      def plus_one(digits: List[int]) -> List[int]:
          for i in range(len(digits) - 1, -1, -1):
              if digits[i] < 9:
                  digits[i] += 1
                  return digits
              digits[i] = 0
          return [1] + digits

  17:
    title: "Roman to Integer"
    description: |
      Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
      Given a roman numeral, convert it to an integer.
    signature: "def roman_to_int(s: str) -> int:"
    examples:
      - input: 's = "III"'
        output: "3"
        explanation: "III = 3"
      - input: 's = "LVIII"'
        output: "58"
        explanation: "L = 50, V= 5, III = 3"
      - input: 's = "MCMXC"'
        output: "1990"
        explanation: "M = 1000, CM = 900, XC = 90"
    test_cases:
      - input: '"III"'
        expected: "3"
      - input: '"LVIII"'
        expected: "58"
      - input: '"MCMXC"'
        expected: "1990"
      - input: '"IV"'
        expected: "4"
      - input: '"IX"'
        expected: "9"
    solution: |
      def roman_to_int(s: str) -> int:
          roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
          result = 0
          prev_value = 0
          
          for char in reversed(s):
              value = roman_map[char]
              if value < prev_value:
                  result -= value
              else:
                  result += value
              prev_value = value
          
          return result

  18:
    title: "Longest Common Prefix"
    description: |
      Write a function to find the longest common prefix string amongst an array of strings.
      If there is no common prefix, return an empty string "".
    signature: "def longest_common_prefix(strs: List[str]) -> str:"
    examples:
      - input: 'strs = ["flower","flow","flight"]'
        output: '"fl"'
        explanation: "The longest common prefix is 'fl'"
      - input: 'strs = ["dog","racecar","car"]'
        output: '""'
        explanation: "There is no common prefix among the input strings"
    test_cases:
      - input: '["flower","flow","flight"]'
        expected: '"fl"'
      - input: '["dog","racecar","car"]'
        expected: '""'
      - input: '["interspecies","interstellar","interstate"]'
        expected: '"inters"'
      - input: '["throne","throne"]'
        expected: '"throne"'
      - input: '[""]'
        expected: '""'
    solution: |
      def longest_common_prefix(strs: List[str]) -> str:
          if not strs:
              return ""
          
          prefix = strs[0]
          for string in strs[1:]:
              while prefix and not string.startswith(prefix):
                  prefix = prefix[:-1]
          return prefix

  19:
    title: "Search Insert Position"
    description: |
      Given a sorted array of distinct integers and a target value, return the index if the target is found. 
      If not, return the index where it would be if it were inserted in order.
      You must write an algorithm with O(log n) runtime complexity.
    signature: "def search_insert(nums: List[int], target: int) -> int:"
    examples:
      - input: "nums = [1,3,5,6], target = 5"
        output: "2"
        explanation: "5 is found at index 2"
      - input: "nums = [1,3,5,6], target = 2"
        output: "1"
        explanation: "2 should be inserted at index 1"
      - input: "nums = [1,3,5,6], target = 7"
        output: "4"
        explanation: "7 should be inserted at index 4 (end of array)"
    test_cases:
      - input: "([1,3,5,6], 5)"
        expected: "2"
      - input: "([1,3,5,6], 2)"
        expected: "1"
      - input: "([1,3,5,6], 7)"
        expected: "4"
      - input: "([1,3,5,6], 0)"
        expected: "0"
      - input: "([1], 1)"
        expected: "0"
    solution: |
      def search_insert(nums: List[int], target: int) -> int:
          left, right = 0, len(nums) - 1
          
          while left <= right:
              mid = (left + right) // 2
              if nums[mid] == target:
                  return mid
              elif nums[mid] < target:
                  left = mid + 1
              else:
                  right = mid - 1
          
          return left

  20:
    title: "Sqrt(x)"
    description: |
      Given a non-negative integer x, return the square root of x rounded down to the nearest integer. 
      The returned integer should be non-negative as well.
      You must not use any built-in exponent function or operator.
    signature: "def my_sqrt(x: int) -> int:"
    examples:
      - input: "x = 4"
        output: "2"
        explanation: "The square root of 4 is 2"
      - input: "x = 8"
        output: "2"
        explanation: "The square root of 8 is 2.828..., rounded down to 2"
    test_cases:
      - input: "4"
        expected: "2"
      - input: "8"
        expected: "2"
      - input: "0"
        expected: "0"
      - input: "1"
        expected: "1"
      - input: "16"
        expected: "4"
    solution: |
      def my_sqrt(x: int) -> int:
          if x < 2:
              return x
          
          left, right = 2, x // 2
          while left <= right:
              mid = (left + right) // 2
              square = mid * mid
              if square == x:
                  return mid
              elif square < x:
                  left = mid + 1
              else:
                  right = mid - 1
          
          return right

  21:
    title: "Add Binary"
    description: |
      Given two binary strings a and b, return their sum as a binary string.
    signature: "def add_binary(a: str, b: str) -> str:"
    examples:
      - input: 'a = "11", b = "1"'
        output: '"100"'
        explanation: "11 + 1 = 100 in binary"
      - input: 'a = "1010", b = "1011"'
        output: '"10101"'
        explanation: "1010 + 1011 = 10101 in binary"
    test_cases:
      - input: '("11", "1")'
        expected: '"100"'
      - input: '("1010", "1011")'
        expected: '"10101"'
      - input: '("0", "0")'
        expected: '"0"'
      - input: '("1", "111")'
        expected: '"1000"'
      - input: '("1111", "1111")'
        expected: '"11110"'
    solution: |
      def add_binary(a: str, b: str) -> str:
          result = []
          carry = 0
          i, j = len(a) - 1, len(b) - 1
          
          while i >= 0 or j >= 0 or carry:
              total = carry
              if i >= 0:
                  total += int(a[i])
                  i -= 1
              if j >= 0:
                  total += int(b[j])
                  j -= 1
              
              result.append(str(total % 2))
              carry = total // 2
          
          return ''.join(reversed(result))

  22:
    title: "Remove Element"
    description: |
      Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. 
      The relative order of the elements may be changed. Return the number of elements in nums which are not equal to val.
    signature: "def remove_element(nums: List[int], val: int) -> int:"
    examples:
      - input: "nums = [3,2,2,3], val = 3"
        output: "2"
        explanation: "Your function should return k = 2, with the first two elements of nums being 2"
      - input: "nums = [0,1,2,2,3,0,4,2], val = 2"
        output: "5"
        explanation: "Your function should return k = 5, with the first five elements containing 0, 1, 3, 0, and 4"
    test_cases:
      - input: "([3,2,2,3], 3)"
        expected: "2"
      - input: "([0,1,2,2,3,0,4,2], 2)"
        expected: "5"
      - input: "([1], 1)"
        expected: "0"
      - input: "([1,2,3,4], 5)"
        expected: "4"
      - input: "([], 1)"
        expected: "0"
      - input: "([2,2,2,2], 2)"
        expected: "0"
      - input: "([1,1,2], 1)"
        expected: "1"
    solution: |
      def remove_element(nums: List[int], val: int) -> int:
          write_index = 0
          for i in range(len(nums)):
              if nums[i] != val:
                  nums[write_index] = nums[i]
                  write_index += 1
          return write_index

  23:
    title: "Find the Index of the First Occurrence"
    description: |
      Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, 
      or -1 if needle is not part of haystack.
    signature: "def str_str(haystack: str, needle: str) -> int:"
    examples:
      - input: 'haystack = "sadbutsad", needle = "sad"'
        output: "0"
        explanation: "'sad' occurs at index 0 and 6. The first occurrence is at index 0"
      - input: 'haystack = "leetcode", needle = "leeto"'
        output: "-1"
        explanation: "'leeto' did not occur in 'leetcode'"
    test_cases:
      - input: '("sadbutsad", "sad")'
        expected: "0"
      - input: '("leetcode", "leeto")'
        expected: "-1"
      - input: '("hello", "ll")'
        expected: "2"
      - input: '("aaaaa", "bba")'
        expected: "-1"
      - input: '("", "")'
        expected: "0"
    solution: |
      def str_str(haystack: str, needle: str) -> int:
          if not needle:
              return 0
          
          for i in range(len(haystack) - len(needle) + 1):
              if haystack[i:i + len(needle)] == needle:
                  return i
          
          return -1

  24:
    title: "Power of Two"
    description: |
      Given an integer n, return true if it is a power of two. Otherwise, return false.
      An integer n is a power of two, if there exists an integer x such that n == 2^x.
    signature: "def is_power_of_two(n: int) -> bool:"
    examples:
      - input: "n = 1"
        output: "true"
        explanation: "2^0 = 1"
      - input: "n = 16"
        output: "true"
        explanation: "2^4 = 16"
      - input: "n = 3"
        output: "false"
        explanation: "3 is not a power of 2"
    test_cases:
      - input: "1"
        expected: "True"
      - input: "16"
        expected: "True"
      - input: "3"
        expected: "False"
      - input: "4"
        expected: "True"
      - input: "0"
        expected: "False"
      - input: "-1"
        expected: "False"
      - input: "-4"
        expected: "False"
      - input: "1024"
        expected: "True"
      - input: "1023"
        expected: "False"
    solution: |
      def is_power_of_two(n: int) -> bool:
          return n > 0 and (n & (n - 1)) == 0

  25:
    title: "Move Zeroes"
    description: |
      Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
      Note that you must do this in-place without making a copy of the array.
    signature: "def move_zeroes(nums: List[int]) -> None:"
    examples:
      - input: "nums = [0,1,0,3,12]"
        output: "[1,3,12,0,0]"
        explanation: "All zeros are moved to the end while maintaining relative order"
      - input: "nums = [0]"
        output: "[0]"
        explanation: "Only one element, no change needed"
    test_cases:
      - input: "[0,1,0,3,12]"
        expected: "[1,3,12,0,0]"
      - input: "[0]"
        expected: "[0]"
      - input: "[1,2,3]"
        expected: "[1,2,3]"
      - input: "[0,0,1]"
        expected: "[1,0,0]"
      - input: "[1,0,2,0,3,0,4]"
        expected: "[1,2,3,4,0,0,0]"
    solution: |
      def move_zeroes(nums: List[int]) -> None:
          write_index = 0
          for i in range(len(nums)):
              if nums[i] != 0:
                  nums[write_index] = nums[i]
                  write_index += 1
          
          for i in range(write_index, len(nums)):
              nums[i] = 0

  26:
    title: "First Bad Version"
    description: |
      You are a product manager and currently leading a team to develop a new product. 
      Unfortunately, the latest version of your product fails the quality check. 
      Since each version is developed based on the previous version, all the versions after a bad version are also bad.
      Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, 
      which causes all the following ones to be bad. You are given an API bool isBadVersion(version) 
      which returns whether version is bad. Implement a function to find the first bad version. 
      You should minimize the number of calls to the API.
    signature: "def first_bad_version(n: int) -> int:"
    examples:
      - input: "n = 5, bad = 4"
        output: "4"
        explanation: "Versions 4 and 5 are bad, first bad version is 4"
      - input: "n = 1, bad = 1"
        output: "1"
        explanation: "Only one version and it's bad"
    test_cases:
      - input: "5"
        expected: "4"
      - input: "1"
        expected: "1"
      - input: "3"
        expected: "1"
      - input: "10"
        expected: "1"
      - input: "100"
        expected: "50"
    solution: |
      def first_bad_version(n: int) -> int:
          left, right = 1, n
          while left < right:
              mid = (left + right) // 2
              if isBadVersion(mid):
                  right = mid
              else:
                  left = mid + 1
          return left

  27:
    title: "Intersection of Two Arrays II"
    description: |
      Given two integer arrays nums1 and nums2, return an array of their intersection. 
      Each element in the result must appear as many times as it shows in both arrays 
      and you may return the result in any order.
    signature: "def intersect(nums1: List[int], nums2: List[int]) -> List[int]:"
    examples:
      - input: "nums1 = [1,2,2,1], nums2 = [2,2]"
        output: "[2,2]"
        explanation: "2 appears twice in both arrays"
      - input: "nums1 = [4,9,5], nums2 = [9,4,9,8,4]"
        output: "[4,9]"
        explanation: "4 and 9 appear in both arrays"
    test_cases:
      - input: "([1,2,2,1], [2,2])"
        expected: "[2,2]"
      - input: "([4,9,5], [9,4,9,8,4])"
        expected: "[4,9]"
      - input: "([1,2,3], [4,5,6])"
        expected: "[]"
      - input: "([1,1], [1,1,1])"
        expected: "[1,1]"
      - input: "([], [1,2,3])"
        expected: "[]"
    solution: |
      def intersect(nums1: List[int], nums2: List[int]) -> List[int]:
          from collections import Counter
          count1 = Counter(nums1)
          count2 = Counter(nums2)
          result = []
          
          for num in count1:
              if num in count2:
                  result.extend([num] * min(count1[num], count2[num]))
          
          return result

  28:
    title: "Happy Number"
    description: |
      Write an algorithm to determine if a number n is happy.
      A happy number is a number defined by the following process:
      - Starting with any positive integer, replace the number by the sum of the squares of its digits.
      - Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
      - Those numbers for which this process ends in 1 are happy.
      Return true if n is a happy number, and false if not.
    signature: "def is_happy(n: int) -> bool:"
    examples:
      - input: "n = 19"
        output: "true"
        explanation: "1^2 + 9^2 = 82, 8^2 + 2^2 = 68, 6^2 + 8^2 = 100, 1^2 + 0^2 + 0^2 = 1"
      - input: "n = 2"
        output: "false"
        explanation: "2 will enter an endless cycle and never reach 1"
    test_cases:
      - input: "19"
        expected: "True"
      - input: "2"
        expected: "False"
      - input: "1"
        expected: "True"
      - input: "7"
        expected: "True"
      - input: "4"
        expected: "False"
    solution: |
      def is_happy(n: int) -> bool:
          def get_sum_of_squares(num):
              total = 0
              while num > 0:
                  digit = num % 10
                  total += digit * digit
                  num //= 10
              return total
          
          seen = set()
          while n != 1 and n not in seen:
              seen.add(n)
              n = get_sum_of_squares(n)
          
          return n == 1

  29:
    title: "Count Primes"
    description: |
      Given an integer n, return the number of prime numbers that are less than n.
    signature: "def count_primes(n: int) -> int:"
    examples:
      - input: "n = 10"
        output: "4"
        explanation: "There are 4 prime numbers less than 10, they are 2, 3, 5, 7"
      - input: "n = 0"
        output: "0"
        explanation: "There are no prime numbers less than 0"
      - input: "n = 1"
        output: "0"
        explanation: "There are no prime numbers less than 1"
    test_cases:
      - input: "10"
        expected: "4"
      - input: "0"
        expected: "0"
      - input: "1"
        expected: "0"
      - input: "2"
        expected: "0"
      - input: "20"
        expected: "8"
    solution: |
      def count_primes(n: int) -> int:
          if n <= 2:
              return 0
          
          is_prime = [True] * n
          is_prime[0] = is_prime[1] = False
          
          for i in range(2, int(n**0.5) + 1):
              if is_prime[i]:
                  for j in range(i*i, n, i):
                      is_prime[j] = False
          
          return sum(is_prime)

  30:
    title: "Reverse Bits"
    description: |
      Reverse bits of a given 32 bits unsigned integer.
    signature: "def reverse_bits(n: int) -> int:"
    examples:
      - input: "n = 00000010100101000001111010011100"
        output: "00111001011110000010100101000000"
        explanation: "The input binary string is reversed bit by bit"
      - input: "n = 11111111111111111111111111111101"
        output: "10111111111111111111111111111111"
        explanation: "The input binary string is reversed bit by bit"
    test_cases:
      - input: "43261596"
        expected: "964176192"
      - input: "4294967293"
        expected: "3221225471"
      - input: "1"
        expected: "2147483648"
      - input: "0"
        expected: "0"
      - input: "2147483648"
        expected: "1"
    solution: |
      def reverse_bits(n: int) -> int:
          result = 0
          for i in range(32):
              result = (result << 1) | (n & 1)
              n >>= 1
          return result